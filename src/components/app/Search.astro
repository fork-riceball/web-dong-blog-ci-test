---
---

<div class="relative hidden lg:block">
  <form
    class="flex items-center gap-3 rounded-3xl border border-primary-900/40 px-4 transition-all focus-within:rounded-xl focus-within:rounded-b-none focus-within:border-b-transparent dark:border-primary-50/40"
  >
    <label for="search">
      <svg
        style="margin-top: 2px;"
        fill="currentColor"
        xmlns="http://www.w3.org/2000/svg"
        height="24"
        viewBox="0 -960 960 960"
        width="24"
        ><path
          d="M784-120 532-372q-30 24-69 38t-83 14q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l252 252-56 56ZM380-400q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"
        ></path></svg
      >
      <span class="sr-only">搜尋</span>
    </label>
    <input
      required
      name="search"
      id="search"
      class="bg-transparent py-2 placeholder-current outline-none"
      type="text"
      min="2"
      max="20"
      placeholder="請輸入您想搜尋的文章……"
      autocomplete="off"
    />
  </form>

  <div
    class="absolute bottom-0 left-0 w-full translate-y-full transform-gpu rounded-b-xl backdrop-blur-xl transition-opacity"
  >
    <p data-result-message class="hidden border border-y-0 border-primary-900/40 px-8 py-4 dark:border-primary-50/40">
      請輸入想搜尋的內容……
    </p>
    <div class="hidden px-8 py-4" data-result-status>加載中……</div>
    <ul
      class="hidden divide-y divide-primary-900/40 border border-t-0 border-primary-900/40 dark:divide-primary-50/40 dark:border-primary-50/40"
      data-results
    >
      <template data-result-item>
        <li class=""><a class="inline-block px-8 py-4" href=""></a></li>
      </template>
    </ul>
  </div>
</div>

<!-- Todo: Maybe rewrite using framework? -->
<script>
  import Fuse from 'fuse.js';
  let posts;
  let fuseInstance;
  const results = document.querySelector('[data-results]');
  const searchInput = document.querySelector('#search');
  const resultItemTemplate = document.querySelector('[data-result-item]');
  const searchMessage = document.querySelector('[data-result-message]');
  const searchStatus = document.querySelector('[data-result-status]');

  async function getPosts() {
    try {
      const res = await fetch('/search.json');
      if (!res.ok) throw new Error('Network response was not ok.');
      searchStatus?.classList.remove('hidden');
      return await res.json();
    } catch (e) {
      console.error(e);
    } finally {
      setTimeout(() => {
        searchStatus?.classList.add('hidden');
      }, 300);
    }
  }

  document.querySelector('form')?.addEventListener('submit', (e) => {
    e.preventDefault();
  });

  searchInput?.addEventListener('focus', async () => {
    results?.classList.remove('hidden');
    searchMessage?.classList.remove('hidden');
    if (!posts) posts = await getPosts();
  });

  // TODO: Tab select will not work
  searchInput?.addEventListener('blur', (e) => {
    setTimeout(() => {
      results?.classList.add('hidden');
      searchMessage?.classList.add('hidden');
    }, 300);
  });

  searchInput?.addEventListener('input', () => {
    if (searchInput.value.length === 0) {
      searchMessage?.classList.remove('hidden');
      results?.replaceChildren();
      return;
    }

    if (posts) {
      fuseInstance = new Fuse(posts, {
        includeScore: true,
        shouldSort: true,
        threshold: 0.5,
        keys: [
          {
            name: 'titleTC',
            weight: 1,
          },
          {
            name: 'excerpt',
            weight: 0.75,
          },
        ],
      });
    }

    const res = fuseInstance.search(searchInput.value).map(({ item }, index) => {
      const maxSearchResult = 5;
      if (index >= maxSearchResult) return;
      const template = resultItemTemplate?.content.cloneNode(true);
      template.querySelector('a')?.setAttribute('href', `/post/${item.slug}`);
      template.querySelector('a')?.append(item.titleTC);
      return template;
    });
    if (res.length === 0) {
      console.log('no result');
      results?.replaceChildren();
      return;
    }

    const filteredArray = res.filter((element) => element !== undefined);
    results?.replaceChildren(...filteredArray);
    searchMessage?.classList.add('hidden');
  });
</script>
