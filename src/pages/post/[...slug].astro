---
import BlogBase from '@/layouts/BlogBase.astro';
import { getCollection, getEntry} from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import Tags from '@/components/taxonomy/tags.astro';
import Category from '@/components/taxonomy/category.astro';
import Utteranc from '@/components/app/Utteranc.astro';
import PostJSONLD from '@/components/app/PostJSONLD.astro';
import PostImage from '@/components/post/PostImage.astro';
import PostBlockquote from '@/components/post/PostBlockquote.astro';

export interface Props {
  post: CollectionEntry<'post'>;
}

export async function getStaticPaths() {
  const publishedPosts = await getCollection('post', (post) => (import.meta.env.PROD ? !post.data.isDraft : true));
  return publishedPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { featureImage, featureIcon, title, titleTC, publishDate, excerpt, themeColor, tags, category } = post.data;
const { slug } = post;
const { Content, headings, remarkPluginFrontmatter } = await post.render();
const lastModified = new Date(remarkPluginFrontmatter.lastModified);
const author = post.data.author && (await getEntry('character', post.data.author?.id));
---

<BlogBase title={titleTC} description={excerpt} themeColor={themeColor} thumbnail={{ src: `${slug}`, alt: `${titleTC}` }}>
  <PostJSONLD
    slot="head"
    headline={post.data.titleTC}
    description={post.data.excerpt}
    publishDate={post.data.publishDate}
    keywords={post.data.tags}
    articleSection={post.data.category}
    author={author && {
      nameTC: author.data.nameTC,
      url: author.data?.social?.url,
    }}

  />
  <main class="mt-0 pt-8 sm:mt-[var(--mainNav-height)]">
    <article
      data-article
      class="article-grid lg:px-auto prose mb-16 block w-full max-w-none px-8 dark:prose-invert dark:prose-dark md:prose-xl lg:grid"
    >
      <header class="not-prose col-start-2 mb-16">
        {
          featureImage && (
            <img
              class="mx-auto mb-16"
              src={import.meta.env.URL_PREFIX + featureImage.url}
              width={featureImage.width}
              height={featureImage.height}
              alt={featureImage.alt}
            />
          )
        }
        {
          featureIcon && (
            <div class="mb-8 max-w-fit overflow-hidden rounded-lg" style={`background-color: ${themeColor}`}>
              <img
                src={`${import.meta.env.BASE_URL}${featureIcon.url}`}
                width={featureIcon.width}
                height={featureIcon.height}
                alt={featureIcon.alt}
              />
            </div>
          )
        }
        <div class="relative mx-auto">
          <div class="text-primary-900 dark:text-primary-50">
            <div class="mb-2">{title}</div>
            <h1 transition:name={`title-${slug}`} class="mb-4 text-4xl font-black md:text-6xl">
              {titleTC}
            </h1>
          </div>
          <div class="flex justify-between">
            <div class="flex md:block">
              <Category category={category} />
              <Tags tags={tags} />
            </div>
          </div>
        </div>
      </header>
      <aside style="top: var(--mainNav-height)" class="sticky col-start-3 row-start-2 ml-4 hidden xl:block">
        <div class="absolute top-0 divide-y divide-primary-200 dark:divide-primary-800">
          <!-- TOC -->
          <div class="p-4">
            {
              Boolean(headings.length) && (
                <div class="">
                  <ul data-toc class="toc m-0 list-none p-0">
                    {headings.map(({ depth, slug: headingSlug, text }) => (
                      <li>
                        <a
                          class={`toc-link block ${depth <= 2 ? 'mt-3' : 'mt-2 pl-3 text-sm'}`}
                          href={`#${headingSlug}`}
                          aria-label={`移動到 ${text} 標題區塊`}
                        >
                          {text}
                        </a>
                      </li>
                    ))}
                  </ul>
                </div>
              )
            }
          </div>

          <!-- Post Date Info -->
          <div class="inline-flex w-full flex-col gap-2 p-4">
            <div class="inline-flex items-center gap-2 text-sm opacity-40 hover:opacity-100">
              發布日期：
              <time>
                {
                  publishDate
                    .toLocaleDateString('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit' })
                    .replace(/\//g, '-')
                }
              </time>
            </div>
            <a
              href={`https://github.com/riceball-tw/web-dong-blog/commits/main/src/content/post/${post.slug}.mdx`}
              class="inline-flex items-center gap-2 text-sm font-normal opacity-40 hover:opacity-100"
            >
              最後更新：
              <time>
                {
                  lastModified
                    .toLocaleDateString('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit' })
                    .replace(/\//g, '-')
                }
              </time>
            </a>
          </div>
        </div>
      </aside>
      <Content components={{ img: PostImage, blockquote: PostBlockquote }} />
      <Utteranc />
    </article>
  </main>
</BlogBase>

<script is:inline>
  function generateTOC() {
    const headings = document.querySelectorAll('[data-article] h2, h3');
    const tocHeadings = document.querySelectorAll('[data-toc] a');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          tocHeadings.forEach((heading) => {
            heading.classList.remove('toc-link--active');
            if (entry.target.textContent === heading.textContent.trim()) {
              heading.classList.toggle('toc-link--active');
            }
          });
        }
      });
    });

    return { headings, observer };
  }

  generateTOC().headings.forEach((heading) => {
    generateTOC().observer.observe(heading);
  });
</script>
