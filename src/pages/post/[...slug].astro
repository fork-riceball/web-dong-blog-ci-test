---
import Base from '@/layouts/Base.astro';
import { getCollection, CollectionEntry } from 'astro:content';
import Tags from '@/components/taxonomy/tags.astro';
import Category from '@/components/taxonomy/category.astro';
import Utteranc from '@/components/app/Utteranc.astro';

export interface Props {
  post: CollectionEntry<'post'>;
}

export async function getStaticPaths() {
  const publishedPosts = await getCollection('post', (post) => (import.meta.env.PROD ? !post.data.isDraft : true));
  return publishedPosts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { featureImage, featureIcon, title, titleTC, publishDate, excerpt, themeColor, tags, category } = post.data;
const { slug } = post;
const { Content, headings } = await post.render();
---

<Base title={titleTC} description={excerpt} themeColor={themeColor} thumbnail={{ src: `${slug}`, alt: `${titleTC}` }}>
  <main class="mt-0 pt-8 sm:mt-[var(--mainNav-height)]">
    <article
      data-article
      class="article-grid lg:px-auto prose mb-16 block w-full max-w-none px-8 dark:prose-invert dark:prose-dark md:prose-xl lg:grid"
    >
      <header class="not-prose col-start-2 mb-16">
        {
          featureImage && (
            <img
              class="mx-auto mb-16"
              src={import.meta.env.URL_PREFIX + featureImage.url}
              width={featureImage.width}
              height={featureImage.height}
              alt={featureImage.alt}
            />
          )
        }
        {
          featureIcon && (
            <div class="mb-8 max-w-fit overflow-hidden rounded-lg" style={`background-color: ${themeColor}`}>
              <img
                src={`${import.meta.env.BASE_URL}${featureIcon.url}`}
                width={featureIcon.width}
                height={featureIcon.height}
                alt={featureIcon.alt}
              />
            </div>
          )
        }
        <div class="relative mx-auto">
          <div class="text-primary-900 dark:text-primary-50">
            <div class="mb-2">{title}</div>
            <h1 transition:name={`title-${slug}`} class="mb-4 text-4xl font-black md:text-6xl">
              {titleTC}
            </h1>
          </div>
          <div class="flex justify-between">
            <div class="flex md:block">
              <Category category={category} />
              <Tags tags={tags} />
            </div>
            <time class="opacity-40 hover:opacity-100">
              {
                publishDate
                  .toLocaleDateString('zh-TW', { year: 'numeric', month: '2-digit', day: '2-digit' })
                  .replace(/\//g, '-')
              }
            </time>
          </div>
        </div>
      </header>

      <aside style="top: var(--mainNav-height)" class="sticky col-start-3 row-start-2 ml-4 hidden xl:block">
        {
          Boolean(headings.length) && (
            <div class="absolute top-0">
              <ul data-toc class="toc m-0 list-none p-0">
                {headings.map(({ depth, slug: headingSlug, text }) => (
                  <li>
                    <a
                      class={`toc-link block ${depth <= 2 ? 'mt-3' : 'mt-2 pl-3 text-sm'}`}
                      href={`#${headingSlug}`}
                      aria-label={`移動到 ${text} 標題區塊`}
                    >
                      {text}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          )
        }
      </aside>
      <Content />
      <Utteranc />
    </article>
  </main>
</Base>

<script is:inline>
  function generateTOC() {
    const headings = document.querySelectorAll('[data-article] h2, h3');
    const tocHeadings = document.querySelectorAll('[data-toc] a');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          tocHeadings.forEach((heading) => {
            heading.classList.remove('toc-link--active');
            if (entry.target.textContent === heading.textContent.trim()) {
              heading.classList.toggle('toc-link--active');
            }
          });
        }
      });
    });

    return { headings, observer };
  }

  generateTOC().headings.forEach((heading) => {
    generateTOC().observer.observe(heading);
  });
</script>

<style is:inline>
  /* TOC */
  .toc-link {
    opacity: 0.6;
  }

  .toc-link--active {
    opacity: 1;
  }

  .toc-link--active a {
    opacity: 1;
  }

  /* Article Layout */
  .article-grid {
    grid-template-columns: 1fr min(65ch, 100%) 1fr;
  }

  .article-grid > * {
    grid-column: 2;
  }

  .article-grid > h2:first-of-type {
    margin-top: 0;
  }

  /* Heading Link */
  .heading-link {
    display: inline-block;
    position: absolute;
    top: 50%;
    left: -1rem;
    opacity: 0.4;
    transform: translate(-100%, -50%);
    transition: opacity 0.3s;
    opacity: 0;
  }
  .heading-link:hover {
    opacity: 1;
  }
  :is(h1, h2, h3, h4, h5, h6):hover .heading-link {
    opacity: 1;
  }

  /* External Link */
  .external-link-icon {
    opacity: 0.6;
    transition: opacity 0.3s;
  }

  /* Inside article-content */
  .article-grid a:hover .external-link-icon {
    opacity: 1;
  }

  .article-grid > .imgFigure {
    width: 100%;
    grid-column: 1 / -1;
    transition: 0.3s;
    z-index: 1;
  }

  .article-grid > video {
    margin: 0 auto;
    grid-column: 1 / -1;
    z-index: 1;
  }

  .article-grid > img {
    margin: 0 auto;
    grid-column: 1 / -1;
  }

  astro-island {
    display: inline-block;
  }

  iframe {
    max-width: 100%;
    margin: 0 auto;
  }
</style>
