---
import Base from '@/layouts/Base.astro';
import { getCollection, CollectionEntry } from 'astro:content';
import Tags from '@/components/taxonomy/tags.astro';
import Category from '@/components/taxonomy/category.astro';
import Utteranc from '@/components/app/Utteranc.astro';

export interface Props {
  post: CollectionEntry<'post'>;
}

export async function getStaticPaths() {
  const posts = await getCollection('post');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}
const { post } = Astro.props;
const { featureImage, featureIcon, title, titleTC, publishDate, excerpt, themeColor, tags, category } = post.data;
const { slug } = post;
const { Content, headings } = await post.render();
---

<Base title={titleTC} description={excerpt} themeColor={themeColor} thumbnail={{ src: `${slug}`, alt: `${titleTC}` }}>
  <main style="margin-top: var(--mainNav-height)" class="prose-lg pt-20">
    <article>
      <header class="not-prose mx-8 mb-16 md:mx-auto">
        <!-- Feature Image -->
        {
          featureImage ? (
            <img
              class="mx-auto mb-16"
              src={import.meta.env.URL_PREFIX + featureImage.url}
              width={featureImage.width}
              height={featureImage.height}
              alt={featureImage.alt}
            />
          ) : (
            ''
          )
        }
        <div class="relative mx-auto max-w-prose">
          <!-- Heading -->
          <div class="text-primary-900 dark:text-primary-50">
            <div class="mb-2">{title}</div>
            <h1 class="mb-4 text-4xl font-bold">{titleTC}</h1>
          </div>
          <div class="flex justify-between">
            <div class="flex md:block">
              <Category category={category} />
              <Tags tags={tags} />
            </div>
            <!-- Publish Date -->
            <time class="opacity-40 hover:opacity-100">
              {publishDate}
            </time>
          </div>

          {
            featureIcon ? (
              <div
                class="absolute left-0 top-0 mx-auto -mt-8 -translate-y-full transform-gpu overflow-hidden rounded-lg"
                style={`background-color: ${themeColor}`}
              >
                <img
                  src={`${import.meta.env.BASE_URL}${featureIcon.url}`}
                  width={featureIcon.width}
                  height={featureIcon.height}
                  alt={featureIcon.alt}
                />
              </div>
            ) : (
              ''
            )
          }
        </div>
      </header>

      <div class="wrapper relative mx-8 max-w-none md:mx-auto">
        <div style="top: var(--mainNav-height)" class="toc sticky left-1/2 mx-3 h-fit w-fit transform-gpu">
          {
            Boolean(headings.length) && (
              <aside class="toc hidden px-8 xl:block">
                <ul class="mt-4">
                  {headings.map(({ depth, slug: headingSlug, text }) => (
                    <li class="toc-item hover:text-accent dark:hover:text-accent-light line-clamp-2 opacity-60 hover:opacity-100">
                      <a
                        class={`block ${depth <= 2 ? 'mt-3' : 'mt-2 pl-3 text-sm'}`}
                        href={`#${headingSlug}`}
                        aria-label={`Scroll to section: ${text}`}
                      >
                        <span /> {text}
                      </a>
                    </li>
                  ))}
                </ul>
              </aside>
            )
          }
        </div>
        <div class="article-content prose dark:prose-invert dark:prose-dark md:prose-lg">
          <Content />
        </div>
        <Utteranc />
      </div>
    </article>
  </main>
</Base>

<style is:inline>
  .wrapper > .toc {
    grid-column: 3;
    grid-row: 1;
  }

  .article-content h2:first-of-type {
    margin-top: 0;
  }

  .toc .toc-item::marker {
    font-size: 0px;
  }

  .wrapper {
    display: grid;
    grid-template-columns:
      1fr
      min(65ch, 100%)
      1fr;
  }
  .wrapper > * {
    grid-column: 2;
  }
  /* .wrapper p:has(> img) { */

  .wrapper p:has(img) {
    margin: 0 auto;
    width: 100%;
    grid-column: 1 / -1;
  }

  .wrapper .imgFigure {
    width: 100%;
    grid-column: 1 / -1;
  }

  .wrapper > video {
    margin: 0 auto;

    grid-column: 1 / -1;
  }

  .wrapper > img {
    margin: 0 auto;
    grid-column: 1 / -1;
  }

  astro-island {
    display: inline-block;
  }

  .raw-html-embed {
    margin: 0 auto;
    width: 100%;
    grid-column: 1 / -1;
    text-align: center;
  }

  .raw-html-embed > video {
    margin: 0 auto;
  }

  iframe {
    max-width: 800px;
    margin: 0 auto;
  }

  table {
    width: auto;
  }

  .table {
    overflow: 'auto';
    display: block;
  }

  p img {
    margin: 0 auto;
  }
</style>
