---
import Base from '@/layouts/Base.astro';
import { getCollection, CollectionEntry } from 'astro:content';
import Tags from '@/components/taxonomy/tags.astro';
import Category from '@/components/taxonomy/category.astro';

export interface Props {
  post: CollectionEntry<'post'>;
}

export async function getStaticPaths() {
  const posts = await getCollection('post');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}
const { post } = Astro.props;
const { featureImage, featureIcon, title, titleTC, excerpt, themeColor, tags, category } = post.data;
const { Content } = await post.render();
---

<Base title={titleTC} description={excerpt} themeColor={themeColor}>
  <main>
    <article class="mt-40 prose-lg">
      <header class="mb-16 not-prose md:mx-auto mx-8">
        <!-- FeatureImageImage -->
        {
          featureImage ? (
            <img
              class="mx-auto mb-16"
              src={import.meta.env.URL_PREFIX + featureImage.url}
              width={featureImage.width}
              height={featureImage.height}
              alt={featureImage.alt}
            />
          ) : (
            ''
          )
        }
        <div class="relative mx-auto max-w-prose">
          <!-- Heading -->
          <h1>
            <div class="mb-2">{title}</div>
            <div class="text-4xl mb-4 font-bold">{titleTC}</div>
          </h1>
          <!-- Categories -->
          <Category category={category} />
          <!-- Tags -->
          <Tags tags={tags} />
          {
            featureIcon ? (
              <div
                class="mx-auto absolute top-0 left-0 rounded-lg transform-gpu -translate-y-full -mt-8 overflow-hidden"
                style={`background-color: ${themeColor}`}
              >
                <img
                  src={`${import.meta.env.BASE_URL}${featureIcon.url}`}
                  width={featureIcon.width}
                  height={featureIcon.height}
                  alt={featureIcon.alt}
                />
              </div>
            ) : (
              ''
            )
          }
        </div>
      </header>
      <div class="mx-8 md:mx-auto prose md:prose-lg max-w-none dark:prose-invert dark:prose-dark singlePost wrapper">
        <Content />
      </div>
    </article>
  </main>
</Base>

<style is:inline>
  .wrapper {
    display: grid;
    grid-template-columns:
      1fr
      min(65ch, 100%)
      1fr;
  }
  .wrapper > * {
    grid-column: 2;
  }
  /* .wrapper p:has(> img) { */

  .wrapper p:has(img) {
    margin: 0 auto;
    width: 100%;
    grid-column: 1 / -1;
  }

  .wrapper .imgFigure {
    margin: 0 auto;
    width: 100%;
    grid-column: 1 / -1;
  }

  .wrapper > video {
    margin: 0 auto;

    grid-column: 1 / -1;
  }

  .wrapper > img {
    margin: 0 auto;
    grid-column: 1 / -1;
  }

  .raw-html-embed {
    margin: 0 auto;
    width: 100%;
    grid-column: 1 / -1;
    text-align: center;
  }

  .raw-html-embed > video {
    margin: 0 auto;
  }

  iframe {
    max-width: 800px;
    margin: 0 auto;
  }

  .table {
    overflow: 'auto';
    display: block;
  }

  /* table {
  width: auto;

}

.table {
  margin: 0 auto;
  padding: 0 1rem;
  width: 100%;
  overflow-x: scroll;
  grid-column: 1 / -1;
} */

  p img {
    margin: 0 auto;
  }
</style>
