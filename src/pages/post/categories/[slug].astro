---
import { characterToUnicode } from '@/helper/characterToUnicode.ts';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import BlogBase from '@/layouts/BlogBase.astro';
import Hero from '@/components/app/Hero.astro';
import CardGallery from '@/components/card/CardGallery.astro';
import PostCard from '@/components/card/PostCard.astro';

export interface Props {
  posts: CollectionEntry<'post'>;
  publishedPosts: CollectionEntry<'post'>[];
}

export async function getStaticPaths() {
  const publishedPosts = await getCollection('post', (post) => (import.meta.env.PROD ? !post.data.isDraft : true));
  const categories = [...new Set(publishedPosts.map((post) => post.data.category).flat())];
  return categories.flatMap((category) => [{ params: { slug: category }, props: { publishedPosts } }]);
}

const { slug } = Astro.params;
const { publishedPosts } = Astro.props;
const avaliableCurrentCategoryPosts = publishedPosts
  .filter((post) => post.data.category === slug)
  .sort((a, b) => b.data.publishDate.getTime() - a.data.publishDate.getTime());
---

<BlogBase title={`搜尋文章分類：${slug}`} description={`搜尋文章分類`}>
  <Hero>
    <Fragment slot="headline">
      搜尋文章分類：<span>{slug}</span>
    </Fragment>
  </Hero>
  <section class="px-4">
    <CardGallery>
      {
        avaliableCurrentCategoryPosts.map((post) => {
          const { data } = post 
          return (
            <PostCard
              post={{
                categoryHref: `/post/categories/${post.data.category}/`,
                tagHrefs: post.data.tags.map((tag) => `/post/tags/${tag}/`),
                slug: post.slug,
                ...data,
              }}
            />
          )
        })
      }
    </CardGallery>
  </section>
</BlogBase>
